// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: greeter.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Greet {
  /// <summary>
  /// The greeting service definition.
  /// </summary>
  public static partial class Greeter
  {
    static readonly string __ServiceName = "Greet.Greeter";

    static readonly grpc::Marshaller<global::Greet.ByeRequest> __Marshaller_Greet_ByeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Greet.ByeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Greet.ByeReply> __Marshaller_Greet_ByeReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Greet.ByeReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Greet.StreamRequest> __Marshaller_Greet_StreamRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Greet.StreamRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Greet.StreamResponse> __Marshaller_Greet_StreamResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Greet.StreamResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Greet.HelloRequest> __Marshaller_Greet_HelloRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Greet.HelloRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Greet.HelloReply> __Marshaller_Greet_HelloReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Greet.HelloReply.Parser.ParseFrom);

    static readonly grpc::Method<global::Greet.ByeRequest, global::Greet.ByeReply> __Method_SayBye = new grpc::Method<global::Greet.ByeRequest, global::Greet.ByeReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SayBye",
        __Marshaller_Greet_ByeRequest,
        __Marshaller_Greet_ByeReply);

    static readonly grpc::Method<global::Greet.StreamRequest, global::Greet.StreamResponse> __Method_BeStreaming = new grpc::Method<global::Greet.StreamRequest, global::Greet.StreamResponse>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "BeStreaming",
        __Marshaller_Greet_StreamRequest,
        __Marshaller_Greet_StreamResponse);

    static readonly grpc::Method<global::Greet.HelloRequest, global::Greet.StreamResponse> __Method_ServerStreaming = new grpc::Method<global::Greet.HelloRequest, global::Greet.StreamResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "ServerStreaming",
        __Marshaller_Greet_HelloRequest,
        __Marshaller_Greet_StreamResponse);

    static readonly grpc::Method<global::Greet.StreamRequest, global::Greet.HelloReply> __Method_ClientStreaming = new grpc::Method<global::Greet.StreamRequest, global::Greet.HelloReply>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "ClientStreaming",
        __Marshaller_Greet_StreamRequest,
        __Marshaller_Greet_HelloReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Greet.GreeterReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Greeter</summary>
    public abstract partial class GreeterBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Greet.ByeReply> SayBye(global::Greet.ByeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task BeStreaming(grpc::IAsyncStreamReader<global::Greet.StreamRequest> requestStream, grpc::IServerStreamWriter<global::Greet.StreamResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task ServerStreaming(global::Greet.HelloRequest request, grpc::IServerStreamWriter<global::Greet.StreamResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Greet.HelloReply> ClientStreaming(grpc::IAsyncStreamReader<global::Greet.StreamRequest> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(GreeterBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SayBye, serviceImpl.SayBye)
          .AddMethod(__Method_BeStreaming, serviceImpl.BeStreaming)
          .AddMethod(__Method_ServerStreaming, serviceImpl.ServerStreaming)
          .AddMethod(__Method_ClientStreaming, serviceImpl.ClientStreaming).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, GreeterBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_SayBye, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Greet.ByeRequest, global::Greet.ByeReply>(serviceImpl.SayBye));
      serviceBinder.AddMethod(__Method_BeStreaming, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::Greet.StreamRequest, global::Greet.StreamResponse>(serviceImpl.BeStreaming));
      serviceBinder.AddMethod(__Method_ServerStreaming, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Greet.HelloRequest, global::Greet.StreamResponse>(serviceImpl.ServerStreaming));
      serviceBinder.AddMethod(__Method_ClientStreaming, serviceImpl == null ? null : new grpc::ClientStreamingServerMethod<global::Greet.StreamRequest, global::Greet.HelloReply>(serviceImpl.ClientStreaming));
    }

  }
}
#endregion
